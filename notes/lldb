(lldb) target create "ck_ft_strlcpy.o":
(lldb) settings set target.source-map /path/to/source /path/to/object
(lldb) breakpoint set --file ck_ft_strlcpy.c --line 56
(lldb) run
In the first command, you use the "target create" command to load the "ck_ft_strlcpy.o" object file into LLDB.
In the second command, you use the "settings set target.source-map" command to tell LLDB where to find the source files. The first argument is the path to the source file directory, and the second argument is the path to the object file directory. This allows LLDB to map between the object file and the source files when setting breakpoints and displaying source code.
In the third command, you use the "breakpoint set" command to set a breakpoint on line 56 of "ck_ft_strlcpy.c".


then type
thread step-in

to see local variables contents
fr v
The full form of the "frame variable" command is:
(lldb) frame variable [<variable1> [<variable2> ...]]
This command takes an optional list of variable names as arguments. If no argument is provided, it displays the values of all local variables in the current stack frame.
For example, if you wanted to display the values of the "dst" and "size" variables in the current stack frame, you could use the following command:
(lldb) frame variable dst size
This would display the values of the "dst" and "size" variables in the current stack frame.

To move one frame up in the call stack in LLDB, you can use the "up" command. This command moves the current frame pointer to the previous frame in the call stack, allowing you to inspect the state of the calling function.
Here's an example:
(lldb) up
This command will move the current frame pointer up one level in the call stack. You can then use the "frame variable" command to inspect the values of local variables in the calling function.
To move one frame down in the call stack, you can use the "down" command. This command moves the current frame pointer to the next frame in the call stack, allowing you to inspect the state of the called function.
Here's an example:
(lldb) down
This command will move the current frame pointer down one level in the call stack. You can then use the "frame variable" command to inspect the values of local variables in the called function.

In the given output of lldb, you can see the memory contents of &dst0a[0] and &dst0b[0] using the fr memory command.
Here's an example:
(lldb) fr memory &dst0a[0] -c 1
0x7ffeefbff700: ba
(lldb) fr memory &dst0b[0] -c 1
0x7ffeefbff700: ba
This code uses the fr memory command to display the memory contents of the first byte of dst0a and dst0b.
The -c 1 argument to fr memory specifies that we want to display one byte of memory at the given address. The & operator is used to get the address of the first byte of each array.
