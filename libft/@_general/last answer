Sure, here are my suggestions for improving the code:

1. Include the necessary header files
The code is missing some necessary header files, such as stdio.h and string.h. Add these header files to ensure the code has access to the necessary functions and data types.

2. Handle edge cases
The code does not handle some edge cases correctly, such as when the length of the little string is greater than the length of the big string. In such cases, the function should return NULL. Add a check for this condition.

3. Use const-correctness
The little string should be declared as a const char pointer since it is not being modified in the function. This ensures const-correctness and avoids unintended modifications to the string.

4. Check for null pointers
Add checks for null pointers to avoid segmentation faults in the program. If either the big or little pointer is null, the function should return NULL.

5. Fix the main function
The main function should include the necessary header files and use the correct format specifier for printing strings (%s instead of %d).

Here is the updated code with these improvements:

```
#include <stdio.h>
#include <string.h>

char *ft_strnstr(const char *big, const char *little, size_t len)
{
    if (!big || !little)
        return NULL;

    if (!*little)
        return (char *)big;

    if (strlen(little) > len)
        return NULL;

    while (*big && len >= strlen(little))
    {
        const char *start = big;
        const char *ptrbig = big;
        const char *ptrlittle = little;

        while (*ptrbig == *ptrlittle && *ptrlittle)
        {
            ptrbig++;
            ptrlittle++;
        }

        if (!*ptrlittle)
            return (char *)start;

        big++;
        len--;
    }

    return NULL;
}

int main(void)
{
    const char *big1 = "in this sentence I want you to try to find this beautiful word, isn't it beautiful";
    const char *little1 = "beautiful";
    const char *little2 = "";
    const char *little3 = "technical";
    const char *little4 = "\0";
    const char *little5 = "this";

    printf("the output of big1 & beautiful is: | %s\n", ft_strnstr(big1, little1, strlen(big1)));
    printf("the output of big1 & beautiful is: | %s\n", strnstr(big1, little1, strlen(big1)));
    printf("the output of big1 & \"\" is: | %s\n", ft_strnstr(big1, little2, strlen(big1)));
    printf("the output of big1 & \"\" is: | %s\n", strnstr(big1, little2, strlen(big1)));
    printf("the output of big1 & technical is: | %s\n", ft_strnstr(big1, little3, strlen(big1)));
    printf("the output of big1 & technical is: | %s\n", strnstr(big1, little3, strlen(big1)));
    printf("the output of big1 & \\0 is: | %s\n", ft_strnstr(big1, little4, strlen(big1)));
    printf("the output of big1 & \\0 is: | %s\n", strnstr(big1, little4, strlen(big1)));
    printf("the output of big1 & this is: | %s\n", ft_strnstr(big1, little5, strlen(big1)));
    printf("the output of big1 & this is: | %s\n", strnstr(big1, little5, strlen(big1)));

    return 0;
}
```
